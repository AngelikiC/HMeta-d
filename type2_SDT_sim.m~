function sim = type2_SDT_sim(d, noise, c, c1, c2, Ntrials)
% Type 2 SDT simulation with variable noise
%
% SF 2014

Ntrials = 10000;
d = 2;
noise = 1;
c = 0;
c1 = [-1.5 -1 -0.5];
c2 = [0.5 1 1.5];

S1mu = -d/2;
S2mu = d/2;

% Initialise response arrays
nC_rS1 = zeros(1, length(c1)+1);
nI_rS1 = zeros(1, length(c1)+1);
nC_rS2 = zeros(1, length(c2)+1);
nI_rS2 = zeros(1, length(c2)+1);

for t = 1:Ntrials
    s = round(rand);
    
    % Type 1 SDT model
    if s == 1
       x = normrnd(S2mu, 1);
    else
       x = normrnd(S1mu, 1);
    end
    
    % Add type 2 noise to signal
    if noise > 0
        x2 = normrnd(x,noise);
    else
        x2 = x;
    end
    
    % Generate confidence ratings
    if s == 0 && x < c      % stimulus S1 and response S1
        pos = (x2 <= [c1 c]);
        [y ind] = find(pos);
        i = min(ind);
        nC_rS1(i) = nC_rS1(i) + 1;
        
    elseif s == 0 && x >= c   % stimulus S1 and response S2     
        pos = (x2 >= [c c2]);
        [y ind] = find(pos);
        i = max(ind);
        nI_rS2(i) = nI_rS2(i) + 1;
        
    elseif s == 1 && x < c  % stimulus S2 and response S1
        pos = (x2 <= [c1 c]);
        [y ind] = find(pos);
        i = min(ind);
        nI_rS1(i) = nI_rS1(i) + 1;
        
    elseif s == 1 && x >= c % stimulus S2 and response S2
        pos = (x2 >= [c c2]);
        [y ind] = find(pos);
        i = max(ind);
        nC_rS2(i) = nC_rS2(i) + 1;
    end
    
end

sim.nR_S1 = [nC_rS1 nI_rS1(end:-1:1)]
sim.nR_S2 = [nI_rS2(end:-1:1) nC_rS2]
