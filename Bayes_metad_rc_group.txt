# Bayesian estimation of response-conditional meta-dâ€™ for group data

model {
  for (s in 1:nsubj) {
  	
	# Multinomial likelihood for response counts ordered as c(nR_S1,nR_S2)
	counts[s, ] ~ dmulti(prT[s, ],nTot[s])

	# Means of SDT distributions]
	mu_rS1[s] <- Mratio_rS1[s]*d1[s]
	mu_rS2[s] <- Mratio_rS2[s]*d1[s]
	S2mu_rS1[s] <- mu_rS1[s]/2
	S1mu_rS1[s] <- -mu_rS1[s]/2
	S2mu_rS2[s] <- mu_rS2[s]/2
	S1mu_rS2[s] <- -mu_rS2[s]/2
	
	# Calculate normalisation constants
	C_area_rS1[s] <- phi(c[s] - S1mu_rS1[s])
	I_area_rS1[s] <- phi(c[s] - S2mu_rS1[s])
	C_area_rS2[s] <- 1-phi(c[s] - S2mu_rS2[s])
	I_area_rS2[s] <- 1-phi(c[s] - S1mu_rS2[s])

	# Get nC_rS1 probs
	pr[s,1] <- phi(cS1[s,1] - S1mu_rS1[s])/C_area_rS1[s]  
	for (k in 1:nratings-2) {                
  		pr[s,k+1] <- (phi(cS1[s,k+1] - S1mu_rS1[s])-phi(cS1[s,k] - S1mu_rS1[s]))/C_area_rS1[s]
	}
	pr[s,nratings] <- (phi(c[s] - S1mu_rS1[s])-phi(cS1[s,nratings-1] - S1mu_rS1[s]))/C_area_rS1[s]   

	# Get nI_rS2 probs
	pr[s,nratings+1] <- ((1-phi(c[s] - S1mu_rS2[s]))-(1-phi(cS2[s,1] - S1mu_rS2[s])))/I_area_rS2[s]
	for (k in 1:nratings-2) {                
  		pr[s,nratings+1+k] <- ((1-phi(cS2[s,k] - S1mu_rS2[s]))-(1-phi(cS2[s,k+1] - S1mu_rS2[s])))/I_area_rS2[s]
	}
	pr[s,nratings*2] <- (1-phi(cS2[s,nratings-1] - S1mu_rS2[s]))/I_area_rS2[s]

	# Get nI_rS1 probs
	pr[s,(nratings*2)+1] <- phi(cS1[s,1] - S2mu_rS1[s])/I_area_rS1[s]
	for (k in 1:nratings-2) {
  		pr[s,(nratings*2)+1+k] <- (phi(cS1[s,k+1] - S2mu_rS1[s])-phi(cS1[s,k] - S2mu_rS1[s]))/I_area_rS1[s]
	}
	pr[s,nratings*3] <- (phi(c[s] - S2mu_rS1[s])-phi(cS1[s,nratings-1] - S2mu_rS1[s]))/I_area_rS1[s]

	# Get nC_rS2 probs
	pr[s,(nratings*3)+1] <- ((1-phi(c[s] - S2mu_rS2[s]))-(1-phi(cS2[s,1] - S2mu_rS2[s])))/C_area_rS2[s]
	for (k in 1:nratings-2) {                
  		pr[s,(nratings*3)+1+k] <- ((1-phi(cS2[s,k] - S2mu_rS2[s]))-(1-phi(cS2[s,k+1] - S2mu_rS2[s])))/C_area_rS2[s]
	}
	pr[s,nratings*4] <- (1-phi(cS2[s,nratings-1] - S2mu_rS2[s]))/C_area_rS2[s]

	# Avoid underflow of probabilities
	for (i in 1:nratings*4) {
  		prT[s,i] <- ifelse(pr[s,i] < Tol, Tol, pr[s,i])
	}

	# Specify ordered prior on criteria (bounded above and below by Type 1 c) 
	for (j in 1:nratings-1) {
  		cS1_raw[s,j] ~ dnorm(0,2) I(,c[s]-Tol)
  		cS2_raw[s,j] ~ dnorm(0,2) I(c[s]+Tol,)
	}
	cS1[s,1:nratings-1] <- sort(cS1_raw[s, ])
	cS2[s,1:nratings-1] <- sort(cS2_raw[s, ])

    Mratio_rS1[s] <- exp(log_Mratio_rS1[s])
    Mratio_rS2[s] <- exp(log_Mratio_rS2[s])

	log_Mratio_rS1[s] ~ dnorm(mu_logMratio_rS1, lambda_logMratio_rS1)	
	log_Mratio_rS2[s] ~ dnorm(mu_logMratio_rS2, lambda_logMratio_rS2)	
	
	}
	
  	# hyperpriors on Mratio
	mu_logMratio_rS1 ~ dnorm(0,0.001)
	lambda_logMratio_rS1 ~ dgamma(0.001,0.001)
	mu_logMratio_rS2 ~ dnorm(0,0.001)
	lambda_logMratio_rS2 ~ dgamma(0.001,0.001)

}